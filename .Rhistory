dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.raw <- prep.ebi(indicator.list)
ebi.subset <- ebi.raw[, .(IndicatorId, Year, Value, CountryName)]
ebi.dt <- merge(ebi.subset, indicator.table)
setnames(ebi.dt, c("CountryName", "Year", "Value"), c("location", "year", "value"))
ebi.dt[, IndicatorId := NULL]
# DPT3 coverage from WHO
dpt.dt <- fread(dpt.path, header = T)
melt.dpt <- melt(dpt.dt, id.vars = "Cname", variable.name = "year")
setnames(melt.dpt, "Cname", "location")
melt.dpt[, c("Category", "Indicator") := .("DPT", "DPT3 Vaccine")]
ebi.dt <- rbind(ebi.dt, melt.dpt)
write.csv(ebi.dt, ebi.out, row.names = F)
### Stats
# Change between 2000 and 2015
start.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == start.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(start.val, "val", "start_val")
end.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == end.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(end.val, "val", "end_val")
change.dt <- merge(start.val, end.val)
change.dt[, change := (start_val - end_val) / start_val * 100]
# Rankings
start.val[order(start_val)]
## Table of improvement given uncertainty
bound2.dt <- rbind(mort.dt, dpt.hold, fill = T)
yr1 <- start.year
yr2 <- end.year
subset.mort <- bound2.dt[metric == "Rate" & age == "Under 5" & year %in% c(yr1, yr2) & measure == "Deaths", .(location, cause, year, val, upper, lower)]
# mean.dt <- dcast(subset.mort, location + cause ~ year, value.var = "val")
subset.mort[, cast_val := ifelse(year == start.year, lower, upper)]
cast.dt <- dcast(subset.mort, location + cause ~ year, value.var = "cast_val")
cast.dt[, sig := ifelse(get(as.character(start.year)) > get(as.character(end.year)), 1, 0)]
cast.dt[is.na(sig), sig := 0]
write.csv(cast.dt, stat.out, row.names =  F)
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
## Paths
# In
data.dir <- "data/raw/"
data.path <- paste0(data.dir, "GBD16_results_all2.csv")
ebi.path <- paste0("data/indicator_list.csv")
dpt.path <- paste0(data.dir, "dpt3.csv")
# Out
out.dir <- "data/prepped/"
mort.out <- paste0(out.dir, "mort.csv")
stat.out <- paste0(out.dir, "stat.csv")
ebi.out <- paste0(out.dir, "ebi.csv")
plot.dir <- "C:/Users/AustinC/OneDrive - bgC3/Documents/plots/U5M_plots/ebi_summary/"
dir.create(plot.dir, showWarnings = F)
### Code
## Cause-specific mortality
# Read data
dt <- fread(data.path)
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
merge.dt <- merge(all.dt, combined.dt, by = c("age", "metric", "year", "measure", "location"))
merge.dt[, diff := val - sum_val]
merge.dt[, c("val", "upper", "lower", "sum_val") := NULL]
setnames(merge.dt, "diff", "val")
merge.dt[, cause := "Other"]
bound.dt <- rbind(dt, merge.dt, fill = T)
# Combine diphtheria, whooping cough, tetanus into DPT
dpt.causes <- c("Diphtheria", "Whooping cough", "Tetanus")
dpt.hold <- dt[cause %in% dpt.causes]
dpt.dt <- dt[cause %in% dpt.causes, .(val = sum(val)), by = .(age, metric, year, measure, location)]
dpt.dt[, cause := "DPT"]
bound.dt <- rbind(bound.dt[!(cause %in% dpt.causes)], dpt.dt, fill = T)
# Calculate 5 year averages
bound.dt[year %%5 != 0, period := paste0((year - year%%5), "-", (year - year%%5 + 5))]
bound.dt[year %%5 == 0, period := paste0((year - year%%5 - 5), "-", (year - year%%5))]
period.dt <- bound.dt[, .(five_avg = mean(val)), by = .(age, metric, period, measure, location, cause)]
mort.dt <- merge(bound.dt, period.dt)
write.csv(mort.dt, mort.out, row.names = F)
## EBI
indicator.table <- data.table(read.csv(ebi.path))
indicator.list <- unique(indicator.table$IndicatorId)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.raw <- prep.ebi(indicator.list)
ebi.subset <- ebi.raw[, .(IndicatorId, Year, Value, CountryName)]
ebi.dt <- merge(ebi.subset, indicator.table)
setnames(ebi.dt, c("CountryName", "Year", "Value"), c("location", "year", "value"))
ebi.dt[, IndicatorId := NULL]
# DPT3 coverage from WHO
dpt.dt <- fread(dpt.path, header = T)
melt.dpt <- melt(dpt.dt, id.vars = "Cname", variable.name = "year")
setnames(melt.dpt, "Cname", "location")
melt.dpt[, c("Category", "Indicator") := .("DPT", "DPT3 Vaccine")]
ebi.dt <- rbind(ebi.dt, melt.dpt)
write.csv(ebi.dt, ebi.out, row.names = F)
cmetric <- "Rate"
cage <- "Under 5"
cmeasure <- "Deaths"
cloc <- "Rwanda"
start.year <- 2000
end.year <- 2015
ccause <- "All causes"
bar <- F
all.plots <- T
cause.plots <- T
## Paths
data.dir <- "data/prepped/"
mort.path <- paste0(data.dir, "mort.csv")
policy.path <- paste0(data.dir, "timeline.csv")
ebi.path <- paste0(data.dir, "ebi.csv")
plot.dir <- "C:/Users/AustinC/OneDrive - bgC3/Documents/plots/U5M_plots/ebi_summary/"
dir.create(plot.dir, showWarnings = F)
### Code
## Data prep
# Read data
mort.dt <- fread(mort.path)[year %in% start.year:end.year]
policy.dt <- fread(policy.path)[start_year %in% start.year:end.year & outlier == 0]
ebi.dt <- fread(ebi.path)[!is.na(value) & year %in% start.year:(end.year + 1)]
# Order policies
policy.dt <- policy.dt[order(start_year)]
### Stats
# Change between 2000 and 2015
start.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == start.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(start.val, "val", "start_val")
end.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == end.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(end.val, "val", "end_val")
change.dt <- merge(start.val, end.val)
change.dt[, change := (start_val - end_val) / start_val * 100]
# Rankings
start.val[order(start_val)]
## Table of improvement given uncertainty
bound2.dt <- rbind(mort.dt, dpt.hold, fill = T)
yr1 <- start.year
yr2 <- end.year
subset.mort <- bound2.dt[metric == "Rate" & age == "Under 5" & year %in% c(yr1, yr2) & measure == "Deaths", .(location, cause, year, val, upper, lower)]
# mean.dt <- dcast(subset.mort, location + cause ~ year, value.var = "val")
subset.mort[, cast_val := ifelse(year == start.year, lower, upper)]
cast.dt <- dcast(subset.mort, location + cause ~ year, value.var = "cast_val")
cast.dt[, sig := ifelse(get(as.character(start.year)) > get(as.character(end.year)), 1, 0)]
cast.dt[is.na(sig), sig := 0]
### Plots
## All cause with EBI Timeline
if(bar) {
plot.path <- paste0(plot.dir, cloc, "_bar_plots.pdf")
} else {
plot.path <- paste0(plot.dir, cloc, "_line_plots.pdf")
}
## Set preferences
# Subset datasets to desired level of specificity
subset.mort <- copy(mort.dt[metric == cmetric & age == cage & measure == cmeasure & location == cloc])
subset.ebi <- copy(ebi.dt[location == cloc])
subset.policy <- copy(policy.dt[location == cloc])
# Set cause order
cause.order <- copy(subset.mort[year == start.year, .(cause, val)])
causes <- cause.order[rev(order(val))]$cause
subset.mort$cause <- factor(subset.mort$cause, levels= rev(causes))
# Set color
color <- brewer.pal(11, "Spectral")
names(color) <- unique(subset.mort[cause != "All causes"]$cause)
## All-cause plot
if(ccause == "All causes") {
decline <- round(change.dt[cause == "All causes", change], 1)
sig <- cast.dt[location == cloc & cause == "All causes", sig]
# Mortality
if(bar) {
gg <- ggplot() + geom_bar(data = subset.mort[cause != "All causes" & year > start.year], stat = "identity", width = 1, aes(x = year, y = five_avg, fill = cause))
} else {
gg <- ggplot() + geom_area(data = subset.mort[cause != "All causes" & year %in% seq(start.year, end.year, 5)], stat = "identity", aes(x = year, y = val, fill = cause))
}
# Policies
if(nrow(subset.policy) > 0) {
policy.y <- 1.1 * rev(seq(subset.mort[cause == "All causes" & year == max(policy.dt$start_year), val], max(subset.mort$val), length = nrow(policy.dt)))
gg <- gg + geom_segment(data = policy.dt, aes(x = start_year, y = 0, xend = start_year, yend = policy.y - 5), linetype = "dashed") +
geom_text(data = policy.dt, aes(x = start_year, y = policy.y, label = policy_name), size = 3, hjust = "left", nudge_x = 0.05)
}
# Format
gg <- gg + ggtitle(paste0(cage, " mortality in ", cloc, ":\n", abs(decline), "% ",ifelse(decline > 0, "decline", "increase"), " ", start.year, "-", end.year,  ifelse(sig == 1, "*", ""))) + ylab(paste(cmeasure, cmetric)) + xlab("Year") + labs(fill = "Cause") + theme_bw() +
theme(text = element_text(size=15), legend.position = "bottom", plot.title = element_text(hjust = 0.5)) + expand_limits(y = 1.2 * max(subset.mort$val)) +
scale_fill_manual(values = color) + guides(fill = guide_legend(reverse = T))
if(sig == 1) {
gg <- gg + labs(caption="* statistically significant change over the time period")
}
# print(ggplotly(gg))
print(gg)
}
library(shiny);library(data.table); library(ggplot2); library(RColorBrewer); library(plotly); library(shinythemes)
# bar <- input$bar
cmetric <- "Rate"
cage <- "Under 5"
cmeasure <- "Deaths"
cloc <- "Rwanda"
start.year <- 2000
end.year <- 2015
ccause <- "All causes"
bar <- F
all.plots <- T
cause.plots <- T
## Paths
data.dir <- "data/prepped/"
mort.path <- paste0(data.dir, "mort.csv")
policy.path <- paste0(data.dir, "timeline.csv")
ebi.path <- paste0(data.dir, "ebi.csv")
plot.dir <- "C:/Users/AustinC/OneDrive - bgC3/Documents/plots/U5M_plots/ebi_summary/"
dir.create(plot.dir, showWarnings = F)
### Code
## Data prep
# Read data
mort.dt <- fread(mort.path)[year %in% start.year:end.year]
policy.dt <- fread(policy.path)[start_year %in% start.year:end.year & outlier == 0]
ebi.dt <- fread(ebi.path)[!is.na(value) & year %in% start.year:(end.year + 1)]
# Order policies
policy.dt <- policy.dt[order(start_year)]
### Stats
# Change between 2000 and 2015
start.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == start.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(start.val, "val", "start_val")
end.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == end.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(end.val, "val", "end_val")
change.dt <- merge(start.val, end.val)
change.dt[, change := (start_val - end_val) / start_val * 100]
# Rankings
start.val[order(start_val)]
## Table of improvement given uncertainty
bound2.dt <- rbind(mort.dt, dpt.hold, fill = T)
yr1 <- start.year
yr2 <- end.year
subset.mort <- bound2.dt[metric == "Rate" & age == "Under 5" & year %in% c(yr1, yr2) & measure == "Deaths", .(location, cause, year, val, upper, lower)]
# mean.dt <- dcast(subset.mort, location + cause ~ year, value.var = "val")
subset.mort[, cast_val := ifelse(year == start.year, lower, upper)]
cast.dt <- dcast(subset.mort, location + cause ~ year, value.var = "cast_val")
cast.dt[, sig := ifelse(get(as.character(start.year)) > get(as.character(end.year)), 1, 0)]
cast.dt[is.na(sig), sig := 0]
### Plots
## All cause with EBI Timeline
if(bar) {
plot.path <- paste0(plot.dir, cloc, "_bar_plots.pdf")
} else {
plot.path <- paste0(plot.dir, cloc, "_line_plots.pdf")
}
## Set preferences
# Subset datasets to desired level of specificity
subset.mort <- copy(mort.dt[metric == cmetric & age == cage & measure == cmeasure & location == cloc])
subset.ebi <- copy(ebi.dt[location == cloc])
subset.policy <- copy(policy.dt[location == cloc])
# Set cause order
cause.order <- copy(subset.mort[year == start.year, .(cause, val)])
causes <- cause.order[rev(order(val))]$cause
subset.mort$cause <- factor(subset.mort$cause, levels= rev(causes))
# Set color
color <- brewer.pal(11, "Spectral")
names(color) <- unique(subset.mort[cause != "All causes"]$cause)
## All-cause plot
if(ccause == "All causes") {
decline <- round(change.dt[cause == "All causes", change], 1)
sig <- cast.dt[location == cloc & cause == "All causes", sig]
# Mortality
if(bar) {
gg <- ggplot() + geom_bar(data = subset.mort[cause != "All causes" & year > start.year], stat = "identity", width = 1, aes(x = year, y = five_avg, fill = cause))
} else {
gg <- ggplot() + geom_area(data = subset.mort[cause != "All causes" & year %in% seq(start.year, end.year, 5)], stat = "identity", aes(x = year, y = val, fill = cause))
}
# Policies
if(nrow(subset.policy) > 0) {
policy.y <- 1.1 * rev(seq(subset.mort[cause == "All causes" & year == max(policy.dt$start_year), val], max(subset.mort$val), length = nrow(policy.dt)))
gg <- gg + geom_segment(data = policy.dt, aes(x = start_year, y = 0, xend = start_year, yend = policy.y - 5), linetype = "dashed") +
geom_text(data = policy.dt, aes(x = start_year, y = policy.y, label = policy_name), size = 3, hjust = "left", nudge_x = 0.05)
}
# Format
gg <- gg + ggtitle(paste0(cage, " mortality in ", cloc, ":\n", abs(decline), "% ",ifelse(decline > 0, "decline", "increase"), " ", start.year, "-", end.year,  ifelse(sig == 1, "*", ""))) + ylab(paste(cmeasure, cmetric)) + xlab("Year") + labs(fill = "Cause") + theme_bw() +
theme(text = element_text(size=15), legend.position = "bottom", plot.title = element_text(hjust = 0.5)) + expand_limits(y = 1.2 * max(subset.mort$val)) +
scale_fill_manual(values = color) + guides(fill = guide_legend(reverse = T))
if(sig == 1) {
gg <- gg + labs(caption="* statistically significant change over the time period")
}
# print(ggplotly(gg))
print(gg)
}
### Code
## Data prep
# Read data
mort.dt <- fread(mort.path)[year %in% start.year:end.year]
policy.dt <- fread(policy.path)[location == cloc & start_year %in% start.year:end.year & outlier == 0]
ebi.dt <- fread(ebi.path)[!is.na(value) & year %in% start.year:(end.year + 1)]
# Order policies
policy.dt <- policy.dt[order(start_year)]
### Stats
# Change between 2000 and 2015
start.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == start.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(start.val, "val", "start_val")
end.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == end.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(end.val, "val", "end_val")
change.dt <- merge(start.val, end.val)
change.dt[, change := (start_val - end_val) / start_val * 100]
# Rankings
start.val[order(start_val)]
## Table of improvement given uncertainty
bound2.dt <- rbind(mort.dt, dpt.hold, fill = T)
yr1 <- start.year
yr2 <- end.year
subset.mort <- bound2.dt[metric == "Rate" & age == "Under 5" & year %in% c(yr1, yr2) & measure == "Deaths", .(location, cause, year, val, upper, lower)]
# mean.dt <- dcast(subset.mort, location + cause ~ year, value.var = "val")
subset.mort[, cast_val := ifelse(year == start.year, lower, upper)]
cast.dt <- dcast(subset.mort, location + cause ~ year, value.var = "cast_val")
cast.dt[, sig := ifelse(get(as.character(start.year)) > get(as.character(end.year)), 1, 0)]
cast.dt[is.na(sig), sig := 0]
### Plots
## All cause with EBI Timeline
if(bar) {
plot.path <- paste0(plot.dir, cloc, "_bar_plots.pdf")
} else {
plot.path <- paste0(plot.dir, cloc, "_line_plots.pdf")
}
## Set preferences
# Subset datasets to desired level of specificity
subset.mort <- copy(mort.dt[metric == cmetric & age == cage & measure == cmeasure & location == cloc])
subset.ebi <- copy(ebi.dt[location == cloc])
subset.policy <- copy(policy.dt[location == cloc])
# Set cause order
cause.order <- copy(subset.mort[year == start.year, .(cause, val)])
causes <- cause.order[rev(order(val))]$cause
subset.mort$cause <- factor(subset.mort$cause, levels= rev(causes))
# Set color
color <- brewer.pal(11, "Spectral")
names(color) <- unique(subset.mort[cause != "All causes"]$cause)
## All-cause plot
if(ccause == "All causes") {
decline <- round(change.dt[cause == "All causes", change], 1)
sig <- cast.dt[location == cloc & cause == "All causes", sig]
# Mortality
if(bar) {
gg <- ggplot() + geom_bar(data = subset.mort[cause != "All causes" & year > start.year], stat = "identity", width = 1, aes(x = year, y = five_avg, fill = cause))
} else {
gg <- ggplot() + geom_area(data = subset.mort[cause != "All causes" & year %in% seq(start.year, end.year, 5)], stat = "identity", aes(x = year, y = val, fill = cause))
}
# Policies
if(nrow(subset.policy) > 0) {
policy.y <- 1.1 * rev(seq(subset.mort[cause == "All causes" & year == max(policy.dt$start_year), val], max(subset.mort$val), length = nrow(policy.dt)))
gg <- gg + geom_segment(data = policy.dt, aes(x = start_year, y = 0, xend = start_year, yend = policy.y - 5), linetype = "dashed") +
geom_text(data = policy.dt, aes(x = start_year, y = policy.y, label = policy_name), size = 3, hjust = "left", nudge_x = 0.05)
}
# Format
gg <- gg + ggtitle(paste0(cage, " mortality in ", cloc, ":\n", abs(decline), "% ",ifelse(decline > 0, "decline", "increase"), " ", start.year, "-", end.year,  ifelse(sig == 1, "*", ""))) + ylab(paste(cmeasure, cmetric)) + xlab("Year") + labs(fill = "Cause") + theme_bw() +
theme(text = element_text(size=15), legend.position = "bottom", plot.title = element_text(hjust = 0.5)) + expand_limits(y = 1.2 * max(subset.mort$val)) +
scale_fill_manual(values = color) + guides(fill = guide_legend(reverse = T))
if(sig == 1) {
gg <- gg + labs(caption="* statistically significant change over the time period")
}
# print(ggplotly(gg))
print(gg)
}
## All-cause plot
if(ccause == "All causes") {
decline <- round(change.dt[cause == "All causes", change], 1)
sig <- cast.dt[location == cloc & cause == "All causes", sig]
# Mortality
if(bar) {
gg <- ggplot() + geom_bar(data = subset.mort[cause != "All causes" & year > start.year], stat = "identity", width = 1, aes(x = year, y = five_avg, fill = cause))
} else {
gg <- ggplot() + geom_area(data = subset.mort[cause != "All causes" & year %in% seq(start.year, end.year, 5)], stat = "identity", aes(x = year, y = val, fill = cause))
}
# Policies
if(nrow(subset.policy) > 0) {
policy.y <- 1.2 * rev(seq(subset.mort[cause == "All causes" & year == max(policy.dt$start_year), val], max(subset.mort$val), length = nrow(policy.dt)))
gg <- gg + geom_segment(data = policy.dt, aes(x = start_year, y = 0, xend = start_year, yend = policy.y - 5), linetype = "dashed") +
geom_text(data = policy.dt, aes(x = start_year, y = policy.y, label = policy_name), size = 3, hjust = "left", nudge_x = 0.05)
}
# Format
gg <- gg + ggtitle(paste0(cage, " mortality in ", cloc, ":\n", abs(decline), "% ",ifelse(decline > 0, "decline", "increase"), " ", start.year, "-", end.year,  ifelse(sig == 1, "*", ""))) + ylab(paste(cmeasure, cmetric)) + xlab("Year") + labs(fill = "Cause") + theme_bw() +
theme(text = element_text(size=15), legend.position = "bottom", plot.title = element_text(hjust = 0.5)) + expand_limits(y = 1.2 * max(subset.mort$val)) +
scale_fill_manual(values = color) + guides(fill = guide_legend(reverse = T))
if(sig == 1) {
gg <- gg + labs(caption="* statistically significant change over the time period")
}
# print(ggplotly(gg))
print(gg)
}
## All-cause plot
if(ccause == "All causes") {
decline <- round(change.dt[cause == "All causes", change], 1)
sig <- cast.dt[location == cloc & cause == "All causes", sig]
# Mortality
if(bar) {
gg <- ggplot() + geom_bar(data = subset.mort[cause != "All causes" & year > start.year], stat = "identity", width = 1, aes(x = year, y = five_avg, fill = cause))
} else {
gg <- ggplot() + geom_area(data = subset.mort[cause != "All causes" & year %in% seq(start.year, end.year, 5)], stat = "identity", aes(x = year, y = val, fill = cause))
}
# Policies
if(nrow(subset.policy) > 0) {
policy.y <- 1.3 * rev(seq(subset.mort[cause == "All causes" & year == max(policy.dt$start_year), val], max(subset.mort$val), length = nrow(policy.dt)))
gg <- gg + geom_segment(data = policy.dt, aes(x = start_year, y = 0, xend = start_year, yend = policy.y - 5), linetype = "dashed") +
geom_text(data = policy.dt, aes(x = start_year, y = policy.y, label = policy_name), size = 3, hjust = "left", nudge_x = 0.05)
}
# Format
gg <- gg + ggtitle(paste0(cage, " mortality in ", cloc, ":\n", abs(decline), "% ",ifelse(decline > 0, "decline", "increase"), " ", start.year, "-", end.year,  ifelse(sig == 1, "*", ""))) + ylab(paste(cmeasure, cmetric)) + xlab("Year") + labs(fill = "Cause") + theme_bw() +
theme(text = element_text(size=15), legend.position = "bottom", plot.title = element_text(hjust = 0.5)) + expand_limits(y = 1.3 * max(subset.mort$val)) +
scale_fill_manual(values = color) + guides(fill = guide_legend(reverse = T))
if(sig == 1) {
gg <- gg + labs(caption="* statistically significant change over the time period")
}
# print(ggplotly(gg))
print(gg)
}
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
## Paths
# In
data.dir <- "data/raw/"
data.path <- paste0(data.dir, "GBD16_results_all2.csv")
ebi.path <- paste0("data/indicator_list.csv")
dpt.path <- paste0(data.dir, "dpt3.csv")
# Out
out.dir <- "data/prepped/"
mort.out <- paste0(out.dir, "mort.csv")
stat.out <- paste0(out.dir, "stat.csv")
ebi.out <- paste0(out.dir, "ebi.csv")
plot.dir <- "C:/Users/AustinC/OneDrive - bgC3/Documents/plots/U5M_plots/ebi_summary/"
dir.create(plot.dir, showWarnings = F)
### Code
## Cause-specific mortality
# Read data
dt <- fread(data.path)
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
merge.dt <- merge(all.dt, combined.dt, by = c("age", "metric", "year", "measure", "location"))
merge.dt[, diff := val - sum_val]
merge.dt[, c("val", "upper", "lower", "sum_val") := NULL]
setnames(merge.dt, "diff", "val")
merge.dt[, cause := "Other"]
bound.dt <- rbind(dt, merge.dt, fill = T)
# Combine diphtheria, whooping cough, tetanus into DPT
dpt.causes <- c("Diphtheria", "Whooping cough", "Tetanus")
dpt.hold <- dt[cause %in% dpt.causes]
dpt.dt <- dt[cause %in% dpt.causes, .(val = sum(val)), by = .(age, metric, year, measure, location)]
dpt.dt[, cause := "DPT"]
bound.dt <- rbind(bound.dt[!(cause %in% dpt.causes)], dpt.dt, fill = T)
# Calculate 5 year averages
bound.dt[year %%5 != 0, period := paste0((year - year%%5), "-", (year - year%%5 + 5))]
bound.dt[year %%5 == 0, period := paste0((year - year%%5 - 5), "-", (year - year%%5))]
period.dt <- bound.dt[, .(five_avg = mean(val)), by = .(age, metric, period, measure, location, cause)]
mort.dt <- merge(bound.dt, period.dt)
write.csv(mort.dt, mort.out, row.names = F)
## EBI
indicator.table <- data.table(read.csv(ebi.path))
indicator.list <- unique(indicator.table[outlier == 0]$IndicatorId)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.raw <- prep.ebi(indicator.list)
ebi.subset <- ebi.raw[!grepl('Five', ByVariableLabel), .(IndicatorId, Year, Value, CountryName)]
ebi.raw[grepl('Five', ByVariableLabel)]
ebi.raw[grepl('Three', ByVariableLabel)]
setdiff(ebi.raw[grepl('Three', ByVariableLabel)]$IndicatorId, ebi.raw[grepl('Five', ByVariableLabel)]$IndicatorId)
ebi.raw[!grepl('Five', ByVariableLabel)
ebi.raw[grepl('Three', ByVariableLabel)]$IndicatorId
setdiff(unique(ebi.raw[grepl('Three', ByVariableLabel)]$IndicatorId), unique(ebi.raw[grepl('Five', ByVariableLabel)]$IndicatorId))
setdiff(unique(ebi.raw[grepl('Five', ByVariableLabel)]$IndicatorId), unique(ebi.raw[grepl('Three', ByVariableLabel)]$IndicatorId))
indicator.table <- data.table(read.csv(ebi.path))
indicator.list <- unique(indicator.table[outlier == 0]$IndicatorId)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.raw <- prep.ebi(indicator.list)
ebi.subset <- ebi.raw[!grepl('Five', ByVariableLabel), .(IndicatorId, Year, Value, CountryName)]
ebi.dt <- merge(ebi.subset, indicator.table)
setnames(ebi.dt, c("CountryName", "Year", "Value"), c("location", "year", "value"))
ebi.dt[, c("IndicatorId", "outlier") := NULL]
# DPT3 coverage from WHO
dpt.dt <- fread(dpt.path, header = T)
melt.dpt <- melt(dpt.dt, id.vars = "Cname", variable.name = "year")
setnames(melt.dpt, "Cname", "location")
melt.dpt[, c("Category", "Indicator") := .("DPT", "DPT3 Vaccine")]
ebi.dt <- rbind(ebi.dt, melt.dpt)
write.csv(ebi.dt, ebi.out, row.names = F)
unique(ebi.raw[grepl('Three', ByVariableLabel)]$IndicatorId)
unique(ebi.raw[grepl('Five', ByVariableLabel)]$IndicatorId)
