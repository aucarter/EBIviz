start.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == start.year & measure == "Deaths", .(location, cause, val)]
setnames(start.val, "val", "start_val")
end.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == end.year & measure == "Deaths", .(location, cause, val)]
setnames(end.val, "val", "end_val")
change.dt <- merge(start.val, end.val)
change.dt[, change := (start_val - end_val) / start_val * 100]
### Stats
# Change between 2000 and 2015
start.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == start.year & measure == "Deaths", .(location, cause, val)]
start.year <- 2000
end.year <- 2015
start.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == start.year & measure == "Deaths", .(location, cause, val)]
setnames(start.val, "val", "start_val")
end.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == end.year & measure == "Deaths", .(location, cause, val)]
setnames(end.val, "val", "end_val")
change.dt <- merge(start.val, end.val)
change.dt[, change := (start_val - end_val) / start_val * 100]
# Rankings
start.val[order(start_val)]
## Table of improvement given uncertainty
bound2.dt <- rbind(mort.dt, dpt.hold, fill = T)
yr1 <- start.year
yr2 <- end.year
subset.mort <- bound2.dt[metric == "Rate" & age == "Under 5" & year %in% c(yr1, yr2) & measure == "Deaths", .(location, cause, year, val, upper, lower)]
# mean.dt <- dcast(subset.mort, location + cause ~ year, value.var = "val")
subset.mort[, cast_val := ifelse(year == start.year, lower, upper)]
subset.mort
cast.dt <- dcast(subset.mort, location + cause ~ year, value.var = "cast_val")
cast.dt[, sig := ifelse(get(as.character(start.year)) > get(as.character(end.year)), 1, 0)]
cast.dt[is.na(sig), sig := 0]
cast.dt[location == "Rwanda"]
write.csv(cast.dt, stat.out, row.names =  F)
# Pull Rotavirus
fromJSON("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:RWA&format=json")
# Pull Rotavirus
fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:RWA&format=csv")
# Pull Rotavirus
fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:GHA&format=csv")
# Pull Rotavirus
fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=format=csv")
# Pull Rotavirus
rota.dtfread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:RWA,SEN&format=csv")
# Pull Rotavirus
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:RWA,SEN&format=csv")
# Pull Rotavirus
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
rota.dt
# DPT3 coverage from WHO
dpt.dt <- fread(dpt.path, header = T)
dtp3.dt <- fread("http://apps.who.int/gho/athena/api/GHO/EQ_DTP3?filter=COUNTRY:*&format=csv")
dtp3.dt
dtp3.dt[COUNTRY == "RWA"]
dtp3.dt[COUNTRY == "RWA", YEAR == 2000]
dtp3.dt[COUNTRY == "RWA" & YEAR == 2000]
dpt.dt
dpt.dt[Cname == "Rwanda"]
dtp3.dt <- fread("http://apps.who.int/gho/athena/api/GHO/dtpv?filter=COUNTRY:*&format=csv")
dtp3.dt <- fread("http://apps.who.int/gho/athena/api/GHO/dptv?filter=COUNTRY:*&format=csv")
dtp3.dt[COUNTRY == "RWA"]
dtp3.dt <- fread("http://apps.who.int/gho/athena/api/GHO/dptv?filter=COUNTRY:*&format=csv&YEAR=*")
dtp3.dt[COUNTRY == "RWA"]
dtp3.dt <- fread("http://apps.who.int/gho/athena/api/GHO/dptv?filter=COUNTRY:*&format=csv&YEAR=*")
unique(dtp3.dt$YEAR)
unique(dtp3.dt[COUNTRY == "RWA"]$YEAR)
# Pull Rotavirus
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv,dptv?filter=COUNTRY:*&format=csv")
bcg.dt <- fread("http://apps.who.int/gho/athena/api/GHO/bcgv?filter=COUNTRY:*&format=csv&YEAR=*")
bcg.dt[COUNTRY == "RWA"]
## Rwanda Longform Plots
library(ggplot2); library(data.table); library(ggrepel)
dt <- fread("data/prepped/prob_death.csv")
mort.dt <- fread("data/prepped/mort.csv")
## U5M line plot
plot.dt <- dt[location == "Rwanda" & age == "Under 5" & year %in% 2000:2015]
gg <- ggplot(data = plot.dt, aes(x = year, y = mean * 1000)) +
geom_line() +
geom_text(data = plot.dt[year %% 5 == 0], aes(label = round(mean * 1000), y = mean * 1000 + 10)) +
ylim(c(0, 200)) +
xlab("Year") +
ylab("Deaths per 1000 live births") +
ggtitle("Under-5 Mortality Rate in Rwanda") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
print(gg)
## Neonatal mortality line plot
plot.dt <- dt[location == "Rwanda" & age == "Neonatal" & year %in% 2000:2015]
gg <- ggplot(data = plot.dt, aes(x = year, y = mean * 1000)) +
geom_line() +
geom_text(data = plot.dt[year %% 5 == 0], aes(label = round(mean * 1000), y = mean * 1000 + 4)) +
ylim(c(0, 50)) +
xlab("Year") +
ylab("Deaths per 1000 live births") +
ggtitle("Neonatal Mortality Rate in Rwanda") +
theme_bw()+
theme(plot.title = element_text(hjust = 0.5), panel.grid.major.x = element_blank())
print(gg)
## Bar plot split by neonatal and other
cast.dt <- dcast(dt, location + year ~ age, value.var = "mean")
cast.dt[, mean := get("Under 5") - Neonatal]
cast.dt[, c("age", "Under 5", "Neonatal") := .("Infant and Child", NULL, NULL)]
all.dt <- rbind(dt, cast.dt)
plot.dt <- all.dt[location == "Rwanda" & age != "Under 5" & year %in% 2000:2015 & year %% 5 == 0]
gg <- ggplot(data = plot.dt, aes(x = year, y = mean * 1000)) + geom_bar(aes(fill = age), stat = "identity") +
geom_text(aes(label = round(mean * 1000)), position = position_stack(vjust = 0.5)) +
xlab("Year") + ylab("Deaths per 1000 live births") +
ggtitle("Neonatal and Non-Neonatal Mortality Rate in Rwanda") +
theme_bw() +
theme(legend.position = "bottom", legend.title = element_blank(), plot.title = element_text(hjust = 0.5))
print(gg)
dt <- fread("data/prepped/prob_death.csv")[, per1000 := NULL]
## Bar plot split by neonatal and other
cast.dt <- dcast(dt, location + year ~ age, value.var = "mean")
cast.dt[, mean := get("Under 5") - Neonatal]
cast.dt[, c("age", "Under 5", "Neonatal") := .("Infant and Child", NULL, NULL)]
all.dt <- rbind(dt, cast.dt)
plot.dt <- all.dt[location == "Rwanda" & age != "Under 5" & year %in% 2000:2015 & year %% 5 == 0]
gg <- ggplot(data = plot.dt, aes(x = year, y = mean * 1000)) + geom_bar(aes(fill = age), stat = "identity") +
geom_text(aes(label = round(mean * 1000)), position = position_stack(vjust = 0.5)) +
xlab("Year") + ylab("Deaths per 1000 live births") +
ggtitle("Neonatal and Non-Neonatal Mortality Rate in Rwanda") +
theme_bw() +
theme(legend.position = "bottom", legend.title = element_blank(), plot.title = element_text(hjust = 0.5))
print(gg)
# Pull Rotavirus
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
# Pull Rotavirus
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
rota.dt
## Paths
# In
data.dir <- "data/raw/"
data.path <- paste0(data.dir, "GBD16_results_all2.csv")
ebi.path <- paste0("data/indicator_list.csv")
dpt.path <- paste0(data.dir, "dpt3.csv")
# Out
out.dir <- "data/prepped/"
mort.out <- paste0(out.dir, "mort.csv")
stat.out <- paste0(out.dir, "stat.csv")
ebi.out <- paste0(out.dir, "ebi.csv")
# Temporary for quickly adding rotavirus vaccine!!!!!!
ebi.in <- fread(ebi.out)
rota.dt
names(ebi.in)
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
# bend the format to match
setnames(rota.dt, c("COUNTRY", "Value", "YEAR"), c("location", "value", "year"))
rota.dt[, Category := "Diarrheal diseases"]
rota.dt[, Indicator := "Rotavirus Vaccine"]
dt <- rbind(ebi.in, rota.dt)
names(rota.dt)
rota.dt
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
# bend the format to match
setnames(rota.dt, c("COUNTRY", "Display Value", "YEAR"), c("location", "value", "year"))
rota.dt[, Category := "Diarrheal diseases"]
rota.dt[, Indicator := "Rotavirus Vaccine"]
dt <- rbind(ebi.in, rota.dt)
rota.subset <- rota.dt[, c("location", "value", "year", "Category", "Indicator")]
dt <- rbind(ebi.in, rota.subset)
write.csv(dt, ebi.out, row.names = F)
shiny::runApp()
runApp()
dt
runApp()
ebi.dt <- fread(ebi.path)[!is.na(value) & year %in% start.year:(end.year + 1)]
ebi.dt <- fread(ebi.path)
ebi.dt
ebi.path <- paste0(data.dir, "ebi.csv")
ebi.path
runApp()
runApp()
# Out
out.dir <- "data/prepped/"
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
ebi.out <- paste0(out.dir, "ebi.csv")
# Temporary for quickly adding rotavirus vaccine!!!!!!
ebi.in <- fread(ebi.out)
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
# bend the format to match
setnames(rota.dt, c("COUNTRY", "Display Value", "YEAR"), c("location", "value", "year"))
rota.dt[, Category := "Diarrheal diseases"]
rota.dt[, Indicator := "Rotavirus Vaccine"]
rota.subset <- rota.dt[, c("location", "value", "year", "Category", "Indicator")]
rota.subset
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
rota.dt
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
rota.dt
rota.dt["COUNTRY" == "RWA", COUNTRY := "Rwanda"]
# bend the format to match
setnames(rota.dt, c("COUNTRY", "Display Value", "YEAR"), c("location", "value", "year"))
rota.dt[, Category := "Diarrheal diseases"]
rota.dt[, Indicator := "Rotavirus Vaccine"]
rota.subset <- rota.dt[, c("location", "value", "year", "Category", "Indicator")]
rota.subset
rota.subset[location == "Rwanda"]
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
rota.dt["COUNTRY" == "RWA", COUNTRY := "Rwanda"]
# bend the format to match
setnames(rota.dt, c("COUNTRY", "Display Value", "YEAR"), c("location", "value", "year"))
rota.dt[, Category := "Diarrheal diseases"]
rota.dt[, Indicator := "Rotavirus Vaccine"]
rota.subset <- rota.dt[, c("location", "value", "year", "Category", "Indicator")]
>
rota.dt["COUNTRY" == "RWA", COUNTRY := "Rwanda"]
rota.subset[location == "Rwanda"]
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
unique(rota.dt$COUNTRY)
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
rota.dt["COUNTRY" == "RWA", COUNTRY := "Rwanda"]
rota.dt[COUNTRY == "Rwanda"]
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
rota.dt
rota.dt[COUNTRY == "RWA"]
rota.dt <- fread("http://apps.who.int/gho/athena/api/GHO/ROTAC?filter=COUNTRY:*&format=csv")
rota.dt[COUNTRY == "RWA", COUNTRY := "Rwanda"]
# bend the format to match
setnames(rota.dt, c("COUNTRY", "Display Value", "YEAR"), c("location", "value", "year"))
rota.dt[, Category := "Diarrheal diseases"]
rota.dt[, Indicator := "Rotavirus Vaccine"]
rota.subset <- rota.dt[, c("location", "value", "year", "Category", "Indicator")]
rota.subset[location == "Rwanda"]
# Temporary for quickly adding rotavirus vaccine!!!!!!
ebi.in <- fread(ebi.out)
dt <- rbind(ebi.in, rota.subset)
write.csv(dt, ebi.out, row.names = F)
runApp()
library(RColorBrewer)
?brewer.apl
?brewer.pal
display.brewer.all()
pcv.dt <- fread("http://apps.who.int/gho/athena/api/GHO/PCV3?filter=COUNTRY:*&format=csv&YEAR=*")
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
pcv.dt <- fread("http://apps.who.int/gho/athena/api/GHO/PCV3?filter=COUNTRY:*&format=csv&YEAR=*")
pcv.dt
pcv.dt[COUNTRY == "RWA"]
hib.dt <- fread("http://apps.who.int/gho/athena/api/GHO/WHS4_129?filter=COUNTRY:*&format=csv&YEAR=*")
hib.dt[COUNTRY == "RWA"]
measles.dt <- fread("http://apps.who.int/gho/athena/api/GHO/measlesv?filter=COUNTRY:*&format=csv&YEAR=*")
measles.dt[COUNTRY == "RWA"]
names(measles.dt)
measles.dt <- fread("http://apps.who.int/gho/athena/api/GHO/mslv?filter=COUNTRY:*&format=csv&YEAR=*")
names(measles.dt)
measles.dt[COUNTRY == "RWA"]
measles.dt <- fread("http://apps.who.int/gho/athena/api/GHO/EQ_MEAIMM?filter=COUNTRY:*&format=csv&YEAR=*")
measles.dt
measles.dt[COUNTRY == "RWA"]
measles.dt <- fread("http://apps.who.int/gho/athena/api/GHO/WHS8_110?filter=COUNTRY:*&format=csv&YEAR=*")
measles.dt[COUNTRY == "RWA"]
measles.dt[COUNTRY == "RWA"][order(YEAR)]
dtp3.dt <- fread("http://apps.who.int/gho/athena/api/GHO/WHS4_100,WHS4_543?filter=COUNTRY:*&format=csv&YEAR=*")
dtp3.dt
pcv.dt <- fread("http://apps.who.int/gho/athena/api/GHO/PCV3?filter=COUNTRY:*&format=csv&YEAR=*")
pcv.dt
who.path <- paste0("darta/who_indicator_list.csv")
who.indicators <- fread(who.path)
who.path <- paste0("data/who_indicator_list.csv")
who.indicators <- fread(who.path)
who.dt <- fread("http://apps.who.int/gho/athena/api/GHO/",
paste(who.indicators$indicator, collapse = ","),
"?filter=COUNTRY:*&format=csv&YEAR=*")
who.indicators$indicator
paste(who.indicators$indicator, collapse = ",")
who.dt <- fread(paste0("http://apps.who.int/gho/athena/api/GHO/",
paste(who.indicators$indicator, collapse = ","),
"?filter=COUNTRY:*&format=csv&YEAR=*"))
who.dt
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
## Paths
# In
data.dir <- "data/raw/"
data.path <- paste0(data.dir, "GBD17_results_all1.csv")
ebi.path <- paste0("data/indicator_list.csv")
who.path <- paste0("data/who_indicator_list.csv")
dpt.path <- paste0(data.dir, "dpt3.csv")
# Out
out.dir <- "data/prepped/"
mort.out <- paste0(out.dir, "mort.csv")
stat.out <- paste0(out.dir, "stat.csv")
ebi.out <- paste0(out.dir, "ebi.csv")
plot.dir <- "C:/Users/AustinC/OneDrive - bgC3/Documents/plots/U5M_plots/ebi_summary/"
dir.create(plot.dir, showWarnings = F)
### Code
## Cause-specific mortality
# Read data
dt <- fread(data.path)
dt
str(dt)
unique(dt$measure_name)
unique(dt$metric_name)
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
merge.dt <- merge(all.dt, combined.dt, by = c("age", "metric", "year", "measure", "location"))
merge.dt[, diff := val - sum_val]
merge.dt[, c("val", "upper", "lower", "sum_val") := NULL]
setnames(merge.dt, "diff", "val")
merge.dt[, cause := "Other"]
bound.dt <- rbind(dt, merge.dt, fill = T)
# Combine diphtheria, whooping cough, tetanus into DPT
dpt.causes <- c("Diphtheria", "Whooping cough", "Tetanus")
dpt.hold <- dt[cause %in% dpt.causes]
dpt.dt <- dt[cause %in% dpt.causes, .(val = sum(val)), by = .(age, metric, year, measure, location)]
dpt.dt[, cause := "DPT"]
bound.dt <- rbind(bound.dt[!(cause %in% dpt.causes)], dpt.dt, fill = T)
# Calculate 5 year averages
bound.dt[year %%5 != 0, period := paste0((year - year%%5), "-", (year - year%%5 + 5))]
bound.dt[year %%5 == 0, period := paste0((year - year%%5 - 5), "-", (year - year%%5))]
period.dt <- bound.dt[, .(five_avg = mean(val)), by = .(age, metric, period, measure, location, cause)]
mort.dt <- merge(bound.dt, period.dt)
str(dt)
setnames(dt, "cause_name", "cause")
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
setnames(dt, c("cause_name", "age_name", "metric_name", "measure_name"), c("cause", "age", "metric", "measure"))
# Read data
dt <- fread(data.path)
setnames(dt, c("cause_name", "age_name", "metric_name", "measure_name"), c("cause", "age", "metric", "measure"))
# Calculate other category
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
setnames(dt, c("cause_name", "age_name", "metric_name", "measure_name", "location_name"),
c("cause", "age", "metric", "measure", "location"))
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
dt <- fread(data.path)
setnames(dt, c("cause_name", "age_name", "metric_name", "measure_name", "location_name", "year_id"),
c("cause", "age", "metric", "measure","year"))
dt <- fread(data.path)
setnames(dt, c("cause_name", "age_name", "metric_name", "measure_name", "location_name"),
c("cause", "age", "metric", "measure",))
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
merge.dt <- merge(all.dt, combined.dt, by = c("age", "metric", "year", "measure", "location"))
merge.dt[, diff := val - sum_val]
dt <- fread(data.path)
setnames(dt, c("cause_name", "age_name", "metric_name", "measure_name", "location_name"),
c("cause", "age", "metric", "measure","location"))
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
merge.dt <- merge(all.dt, combined.dt, by = c("age", "metric", "year", "measure", "location"))
merge.dt[, diff := val - sum_val]
merge.dt[, c("val", "upper", "lower", "sum_val") := NULL]
setnames(merge.dt, "diff", "val")
merge.dt[, cause := "Other"]
bound.dt <- rbind(dt, merge.dt, fill = T)
# Combine diphtheria, whooping cough, tetanus into DPT
dpt.causes <- c("Diphtheria", "Whooping cough", "Tetanus")
dpt.hold <- dt[cause %in% dpt.causes]
dpt.dt <- dt[cause %in% dpt.causes, .(val = sum(val)), by = .(age, metric, year, measure, location)]
dpt.dt[, cause := "DPT"]
bound.dt <- rbind(bound.dt[!(cause %in% dpt.causes)], dpt.dt, fill = T)
# Calculate 5 year averages
bound.dt[year %%5 != 0, period := paste0((year - year%%5), "-", (year - year%%5 + 5))]
bound.dt[year %%5 == 0, period := paste0((year - year%%5 - 5), "-", (year - year%%5))]
period.dt <- bound.dt[, .(five_avg = mean(val)), by = .(age, metric, period, measure, location, cause)]
mort.dt <- merge(bound.dt, period.dt)
write.csv(mort.dt, mort.out, row.names = F)
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
## Paths
# In
data.dir <- "data/raw/"
data.path <- paste0(data.dir, "GBD17_results_all2.csv")
ebi.path <- paste0("data/indicator_list.csv")
who.path <- paste0("data/who_indicator_list.csv")
dpt.path <- paste0(data.dir, "dpt3.csv")
# Out
out.dir <- "data/prepped/"
mort.out <- paste0(out.dir, "mort.csv")
stat.out <- paste0(out.dir, "stat.csv")
ebi.out <- paste0(out.dir, "ebi.csv")
plot.dir <- "C:/Users/AustinC/OneDrive - bgC3/Documents/plots/U5M_plots/ebi_summary/"
dir.create(plot.dir, showWarnings = F)
### Code
## Cause-specific mortality
# Read data
dt <- fread(data.path)
setnames(dt, c("cause_name", "age_name", "metric_name", "measure_name", "location_name"),
c("cause", "age", "metric", "measure","location"))
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
merge.dt <- merge(all.dt, combined.dt, by = c("age", "metric", "year", "measure", "location"))
merge.dt[, diff := val - sum_val]
merge.dt[, c("val", "upper", "lower", "sum_val") := NULL]
setnames(merge.dt, "diff", "val")
merge.dt[, cause := "Other"]
bound.dt <- rbind(dt, merge.dt, fill = T)
# Combine diphtheria, whooping cough, tetanus into DPT
dpt.causes <- c("Diphtheria", "Whooping cough", "Tetanus")
dpt.hold <- dt[cause %in% dpt.causes]
dpt.dt <- dt[cause %in% dpt.causes, .(val = sum(val)), by = .(age, metric, year, measure, location)]
dpt.dt[, cause := "DPT"]
bound.dt <- rbind(bound.dt[!(cause %in% dpt.causes)], dpt.dt, fill = T)
# Calculate 5 year averages
bound.dt[year %%5 != 0, period := paste0((year - year%%5), "-", (year - year%%5 + 5))]
bound.dt[year %%5 == 0, period := paste0((year - year%%5 - 5), "-", (year - year%%5))]
period.dt <- bound.dt[, .(five_avg = mean(val)), by = .(age, metric, period, measure, location, cause)]
mort.dt <- merge(bound.dt, period.dt)
source('~/Code/R/EBIviz/data_prep.R', echo=TRUE)
write.csv(mort.dt, mort.out, row.names = F)
knitr::opts_chunk$set(echo = TRUE)
x <- c(rep(1, 10), rep(0, 10))
x
dt <- data.table(x = x, y = y)
x <- c(rep(1, 10), rep(0, 10))
y <- c(10.1, 11.0, 11.4, 11.7, 11.8, 13.1, 13.7, 13.9, 14.9, 16.8,
9.1, 9.1, 9.4, 10.9, 11.0, 11.2, 11.5, 11.8, 12.7, 12.9)
dt <- data.table(x = x, y = y)
dt
mean.ctrl <- mean(dt[x == 0]$y)
mean.trt <- mean(dt[x == 1]$y)
hat.ace <_ mean.trt - mean.ctrl
hat.ace <- mean.trt - mean.ctrl
var.ctrl <- var(dt[x==0]$y)
var.trt <- var(dt[x==1]$)
x <- c(rep(1, 10), rep(0, 10))
y <- c(10.1, 11.0, 11.4, 11.7, 11.8, 13.1, 13.7, 13.9, 14.9, 16.8,
9.1, 9.1, 9.4, 10.9, 11.0, 11.2, 11.5, 11.8, 12.7, 12.9)
dt <- data.table(x = x, y = y)
mean.ctrl <- mean(dt[x == 0]$y)
mean.trt <- mean(dt[x == 1]$y)
hat.ace <- mean.trt - mean.ctrl
var.ctrl <- var(dt[x==0]$y)
var.trt <- var(dt[x==1]$y)
hat.var.hat.ace <- var.trt/k + var.ctrl/(n-k)
k <- sum(x)
hat.var.hat.ace <- var.trt/k + var.ctrl/(n-k)
x <- c(rep(1, 10), rep(0, 10))
y <- c(10.1, 11.0, 11.4, 11.7, 11.8, 13.1, 13.7, 13.9, 14.9, 16.8,
9.1, 9.1, 9.4, 10.9, 11.0, 11.2, 11.5, 11.8, 12.7, 12.9)
dt <- data.table(x = x, y = y)
mean.ctrl <- mean(dt[x == 0]$y)
mean.trt <- mean(dt[x == 1]$y)
hat.ace <- mean.trt - mean.ctrl
var.ctrl <- var(dt[x==0]$y)
var.trt <- var(dt[x==1]$y)
k <- sum(x)
n <- length(x)
hat.var.hat.ace <- var.trt/k + var.ctrl/(n-k)
hat.var.hat.ace <- var.trt/k + var.ctrl/(n-k)
library(data.table); library(ggplot2)
x <- c(rep(1,100),rep(0,100))
y   <- c(rep(1,319),rep(0,290),rep(1,178),rep(0,530))
table(y,x)
x <- c(rep(1,290 + 319),rep(0,530 + 178))
y   <- c(rep(1,319),rep(0,290),rep(1,178),rep(0,530))
table(y,x)
x <- c(rep(1,290 + 319),rep(0,530 + 178))
y   <- c(rep(1,178),rep(0,530), rep(1,319),rep(0,290))
table(y,x)
x <- c(rep(1,290 + 319),rep(0,530 + 178))
y   <- c(rep(1,178),rep(0,530), rep(1,319),rep(0,290))
table(y,x)
x <- c(rep(1,290 + 319),rep(0,530 + 178))
y   <- c(rep(1,319),rep(0,290),rep(1,178),rep(0,530))
table(y,x)
x <- c(rep(1,290 + 319),rep(0,530 + 178))
y   <- c(rep(1,319),rep(0,290),rep(1,178),rep(0,530))
table(y,x)
obs.test.stat <- sum(x*(1-y))
n <- length(x)
k <- sum(x)
nsims <- 5000
test.stat.vec <- rep(NA,nsims)
for(i in 1:nsims){
trt.grp <- sample((1:n),k)  #choose our treatment group
xsim <- rep(0,n)
xsim[trt.grp] <- 1  #construct treatment vector
test.stat <- sum(xsim*(1-y))
test.stat.vec[i] <- test.stat
}
sum(test.stat.vec < (obs.test.stat+0.5))/nsims
## Compare to the true value
phyper(290,290 + 530, 319 + 178, 290 + 319)
table(y,x)
table(x,y)
table(y,x)
x <- c(rep(1,290 + 319),rep(0,530 + 178))
y   <- c(rep(1,319),rep(0,290),rep(1,178),rep(0,530))
table(y,x)
obs.test.stat <- sum(x*(1-y))
n <- length(x)
k <- sum(x)
nsims <- 5000
test.stat.vec <- rep(NA,nsims)
for(i in 1:nsims){
trt.grp <- sample((1:n),k)  #choose our treatment group
xsim <- rep(0,n)
xsim[trt.grp] <- 1  #construct treatment vector
test.stat <- sum(xsim*(1-y))
test.stat.vec[i] <- test.stat
}
test.stat.vev
test.stat.vec
sum(test.stat.vec < (obs.test.stat+0.5))/nsims
trt.grp <- sample((1:n),k)
trt.group
trt.grp
obs.test.stat
## Compare to the true value
phyper(290, 290 + 530, 319 + 178, 290 + 319)
