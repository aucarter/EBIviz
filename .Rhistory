end.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == end.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(end.val, "val", "end_val")
change.dt <- merge(start.val, end.val)
change.dt[, change := (start_val - end_val) / start_val * 100]
# Rankings
start.val[order(start_val)]
## Table of improvement given uncertainty
bound2.dt <- rbind(mort.dt, dpt.hold, fill = T)
yr1 <- start.year
yr2 <- end.year
subset.mort <- bound2.dt[metric == "Rate" & age == "Under 5" & year %in% c(yr1, yr2) & measure == "Deaths", .(location, cause, year, val, upper, lower)]
# mean.dt <- dcast(subset.mort, location + cause ~ year, value.var = "val")
subset.mort[, cast_val := ifelse(year == start.year, lower, upper)]
cast.dt <- dcast(subset.mort, location + cause ~ year, value.var = "cast_val")
cast.dt[, sig := ifelse(get(as.character(start.year)) > get(as.character(end.year)), 1, 0)]
cast.dt[is.na(sig), sig := 0]
### Plots
## All cause with EBI Timeline
if(bar) {
plot.path <- paste0(plot.dir, cloc, "_bar_plots.pdf")
} else {
plot.path <- paste0(plot.dir, cloc, "_line_plots.pdf")
}
## Set preferences
# Subset datasets to desired level of specificity
subset.mort <- copy(mort.dt[metric == cmetric & age == cage & measure == cmeasure & location == cloc])
subset.ebi <- copy(ebi.dt[location == cloc])
subset.policy <- copy(policy.dt[location == cloc])
# Set cause order
cause.order <- copy(subset.mort[year == start.year, .(cause, val)])
causes <- cause.order[rev(order(val))]$cause
subset.mort$cause <- factor(subset.mort$cause, levels= rev(causes))
# Set color
color <- brewer.pal(11, "Spectral")
names(color) <- unique(subset.mort[cause != "All causes"]$cause)
## All-cause plot
if(ccause == "All causes") {
decline <- round(change.dt[cause == "All causes", change], 1)
sig <- cast.dt[location == cloc & cause == "All causes", sig]
# Mortality
if(bar) {
gg <- ggplot() + geom_bar(data = subset.mort[cause != "All causes" & year > start.year], stat = "identity", width = 1, aes(x = year, y = five_avg, fill = cause))
} else {
gg <- ggplot() + geom_area(data = subset.mort[cause != "All causes" & year %in% seq(start.year, end.year, 5)], stat = "identity", aes(x = year, y = val, fill = cause))
}
# Policies
if(nrow(subset.policy) > 0) {
policy.y <- 1.1 * rev(seq(subset.mort[cause == "All causes" & year == max(policy.dt$start_year), val], max(subset.mort$val), length = nrow(policy.dt)))
gg <- gg + geom_segment(data = policy.dt, aes(x = start_year, y = 0, xend = start_year, yend = policy.y - 5), linetype = "dashed") +
geom_text(data = policy.dt, aes(x = start_year, y = policy.y, label = policy_name), size = 3, hjust = "left", nudge_x = 0.05)
}
# Format
gg <- gg + ggtitle(paste0(cage, " mortality in ", cloc, ":\n", abs(decline), "% ",ifelse(decline > 0, "decline", "increase"), " ", start.year, "-", end.year,  ifelse(sig == 1, "*", ""))) + ylab(paste(cmeasure, cmetric)) + xlab("Year") + labs(fill = "Cause") + theme_bw() +
theme(text = element_text(size=15), legend.position = "bottom", plot.title = element_text(hjust = 0.5)) + expand_limits(y = 1.2 * max(subset.mort$val)) +
scale_fill_manual(values = color) + guides(fill = guide_legend(reverse = T))
if(sig == 1) {
gg <- gg + labs(caption="* statistically significant change over the time period")
}
# print(ggplotly(gg))
print(gg)
}
## Cause-specific plot
if(ccause != "All causes") {
max.val <- max(subset.mort[cause != "All causes"]$val)
# Prep policy height
if(nrow(subset.policy) > 0) {
subset.mort[, start_year := year]
policy.dt <- merge(policy.dt, subset.mort[, .(location, cause, start_year, val)], by = c("location", "cause", "start_year"))
}
decline <- round(change.dt[cause == ccause, change], 1)
sig <- cast.dt[location == cloc & cause == ccause, sig]
plot.dt <- mort.dt[year >= 1990 & metric == cmetric & age == cage & measure == cmeasure & location == cloc & cause == ccause]
if(bar) {
gg <- ggplot() + geom_bar(data = plot.dt[year > start.year], stat = "identity", width = 1, aes(x = year, y = five_avg, fill = cause))
} else {
gg <- ggplot() + geom_area(data = plot.dt[year %in% seq(start.year, end.year, 5)], aes(x = year, y = val, fill = cause), alpha = 0.8, size = 2)
}
gg <- gg + ggtitle(paste0(ccause, " mortality in ", cloc, ":\n", abs(decline), "% ", ifelse(decline > 0, "decline", "increase"), " 2000-2015",  ifelse(sig == 1, "*", ""))) +
ylab(paste(cmeasure, cmetric)) + xlab("Year") + labs(fill = "Cause") + theme_bw() +
theme(text = element_text(size=15), legend.position = "bottom", plot.title = element_text(hjust = 0.5)) + expand_limits(y = c(0, max.val)) +
scale_fill_manual(values = color, guide = FALSE)
if(ccause %in% unique(subset.ebi$Category)) {
gg <- gg + geom_line(data = subset.ebi[Category == ccause], aes(x = year, y = value * max.val / 100, group = Indicator)) +
geom_point(data = subset.ebi[Category == ccause], aes(x = year, y = value * max.val / 100, shape = Indicator), size = 3) +
scale_y_continuous(sec.axis = sec_axis(~. *100 / max.val, name = "Coverage")) +
guides(shape=guide_legend(nrow=length(unique(subset.ebi[Category == ccause]$Indicator)),byrow=TRUE, title = "EBI Coverage Indicators"))
}
if(ccause %in% subset.policy$cause) {
policy.y <- 20 + rev(seq(plot.dt[year == max(policy.dt[cause == ccause]$start_year), val], max(plot.dt$val), length = nrow(policy.dt[cause == ccause])))
gg <- gg + geom_segment(data = policy.dt[cause == ccause], aes(x = start_year, y = 0, xend = start_year, yend = policy.y), linetype = "dashed") +
geom_text(data = policy.dt[cause == ccause], aes(x = start_year, y = policy.y, label = policy_name), size = 3, hjust = "left", nudge_x = 0.1)
}
if(sig == 1) {
gg <- gg + labs(caption="* statistically significant change over the time period")
}
# gg <- ggplotly(gg)
gg
}
}
setwd("C:/Users/AustinC/Documents/code/shiny/")
fn.plot(input)
runApp()
runApp()
runApp()
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
## Paths
# In
data.dir <- "data/raw/"
data.path <- paste0(data.dir, "GBD16_results_all2.csv")
ebi.path <- paste0(data.dir, "20180731_STAT Compiler All Countries (Prepped).csv")
dpt.path <- paste0(data.dir, "dpt3.csv")
# Out
out.dir <- "data/prepped/"
mort.out <- paste0(out.dir, "mort.csv")
stat.out <- paste0(out.dir, "stat.csv")
ebi.out <- paste0(out.dir, "ebi.csv")
plot.dir <- "C:/Users/AustinC/OneDrive - bgC3/Documents/plots/U5M_plots/ebi_summary/"
dir.create(plot.dir, showWarnings = F)
### Code
## Cause-specific mortality
# Read data
dt <- fread(data.path)
birth.dt <- fread(paste0(data.dir, "births.csv"))[sex_id == 3]
setnames(birth.dt, c("year_id", "location_name"), c("year", "location"))
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
merge.dt <- merge(all.dt, combined.dt, by = c("age", "metric", "year", "measure", "location"))
merge.dt[, diff := val - sum_val]
merge.dt[, c("val", "upper", "lower", "sum_val") := NULL]
setnames(merge.dt, "diff", "val")
merge.dt[, cause := "Other"]
bound.dt <- rbind(dt, merge.dt, fill = T)
# Combine diphtheria, whooping cough, tetanus into DPT
dpt.causes <- c("Diphtheria", "Whooping cough", "Tetanus")
dpt.hold <- dt[cause %in% dpt.causes]
dpt.dt <- dt[cause %in% dpt.causes, .(val = sum(val)), by = .(age, metric, year, measure, location)]
dpt.dt[, cause := "DPT"]
bound.dt <- rbind(bound.dt[!(cause %in% dpt.causes)], dpt.dt, fill = T)
# Switch rate to have births in denominator
births.merge <- merge(bound.dt[metric == "Number"], birth.dt[, .(location, year, population)], by = c("year", "location"))
births.merge[, val := val / population]
births.merge[, population := NULL]
births.merge[, metric := "Rate"]
bound.dt <- rbind(bound.dt[metric == "Number"], births.merge)
# Calculate 5 year averages
bound.dt[year %%5 != 0, period := paste0((year - year%%5), "-", (year - year%%5 + 5))]
bound.dt[year %%5 == 0, period := paste0((year - year%%5 - 5), "-", (year - year%%5))]
period.dt <- bound.dt[, .(five_avg = mean(val)), by = .(age, metric, period, measure, location, cause)]
mort.dt <- merge(bound.dt, period.dt)
write.csv(mort.dt, mort.out, row.names = F)
## EBI
indicator.list <- c(
"CH_DIAT_C_ADV",
"CH_DIAT_C_ORT",
"CH_DIAT_C_RHF",
"CH_DIAT_C_ZNC",
"CH_ARIS_C_ARI",
"CH_ARIS_C_ADV",
"CH_ARIS_C_ABI",
"CH_FEVR_C_FEV",
"CH_FEVT_C_ABI",
"CH_FEVT_C_ADV",
"CH_FEVT_C_AML",
"CN_BRFS_C_EXB",
"CN_BRFS_C_CMP",
"CH_VACS_C_BCG",
"CH_VACS_C_BAS",
"CH_VACS_C_MSL",
"HA_KMTC_W_BFD",
"HA_CATH_W_ATR",
"RH_ANCP_W_CHW",
"RH_ANCN_W_N4P",
"RH_ANCC_W_IRN",
"RH_TTIJ_W_PRT",
"RH_DELA_C_SKP",
"RH_PCCT_C_DY2",
"RH_PCCP_C_DOC",
"ML_NETP_H_ITN",
"ML_IRSM_H_IRS",
"ML_IRSM_H_IIR"
)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.dt <- prep.ebi(indicator.list)
ebi.dt
names(ebi.dt)
unique(ebi.dt[, .(DataId, Indicator)])
View(unique(ebi.dt[, .(IndicatorId, Indicator)]))
View(unique(ebi.dt[, .(IndicatorId, Indicator)]))
names(ebi.dt)
unique(ebi.dtByVariableLable)
unique(ebi.dt$ByVariableLable)
unique(ebi.dt$ByVariableLabel)
ebi.dt[IndicatorId == "CN_BRFS_C_CMP"]
unique(ebi.dt$CharacteristicLabel)
ebi.dt[IndicatorId == "CN_BRFS_C_EXP"]
ebi.dt[IndicatorId == "CN_BRFS_C_EXB"]
ebi.path <- paste0("data/indicator_list.csv")
## EBI
indicator.list <- fread(ebi.path)
indicator.table <- fread(ebi.path)
indicator.list <- unique(indicator.table$code)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.dt <- prep.ebi(indicator.list)
indicator.list
ebi.path <- paste0("data/indicator_list.csv")
(ebi.path)
## EBI
indicator.table <- fread(ebi.path)
indicator.table
indicator.table
ebi.path
## EBI
indicator.table <- fread(ebi.path)
indicator.table
## EBI
indicator.table <- read_csv(ebi.path)
## EBI
indicator.table <- read.csv(ebi.path)
indicator.table
## EBI
indicator.table <- data.table(read.csv(ebi.path))
indicator.table
indicator.list <- unique(indicator.table$code)
indicator.list
indicator.table
indicator.table <- data.table(read.csv(ebi.path))
indicator.list <- unique(indicator.table$code)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.dt <- prep.ebi(indicator.list)
ebi.dt
ebi.raw <- prep.ebi(indicator.list)
names(ebi.dt)
indicator.table <- data.table(read.csv(ebi.path))
indicator.list <- unique(indicator.table$IndicatorId)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.raw <- prep.ebi(indicator.list)
ebi.subset <- ebi.raw[, .(IndicatorId, Year, Value, CountryName)]
merge(ebi.subset, ebi.table)
merge(ebi.subset, indicator.table)
setnames(ebi.dt, c("CountryName", "Year"), c("location", "year"))
ebi.dt
ebi.raw <- prep.ebi(indicator.list)
ebi.subset <- ebi.raw[, .(IndicatorId, Year, Value, CountryName)]
ebi.dt <- merge(ebi.subset, indicator.table)
setnames(ebi.dt, c("CountryName", "Year"), c("location", "year"))
ebi.dt
indicator.table <- data.table(read.csv(ebi.path))
indicator.list <- unique(indicator.table$IndicatorId)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.raw <- prep.ebi(indicator.list)
ebi.subset <- ebi.raw[, .(IndicatorId, Year, Value, CountryName)]
ebi.dt <- merge(ebi.subset, indicator.table)
setnames(ebi.dt, c("CountryName", "Year", "Value"), c("location", "year", "value"))
# DPT3 coverage from WHO
dpt.dt <- fread(dpt.path, header = T)
melt.dpt <- melt(dpt.dt, id.vars = "Cname", variable.name = "year")
setnames(melt.dpt, "Cname", "location")
melt.dpt[, c("Category", "Indicator") := .("DPT", "DPT3 Vaccine")]
ebi.dt <- rbind(ebi.dt, melt.dpt)
write.csv(ebi.dt, ebi.out, row.names = F)
names(melt.dpt)
ebi.dt[, IndicatorId := NULL]
# DPT3 coverage from WHO
dpt.dt <- fread(dpt.path, header = T)
melt.dpt <- melt(dpt.dt, id.vars = "Cname", variable.name = "year")
setnames(melt.dpt, "Cname", "location")
melt.dpt[, c("Category", "Indicator") := .("DPT", "DPT3 Vaccine")]
ebi.dt <- rbind(ebi.dt, melt.dpt)
write.csv(ebi.dt, ebi.out, row.names = F)
write.csv(ebi.dt, ebi.out, row.names = F)
write.csv(ebi.dt, ebi.out, row.names = F)
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
## Paths
# In
data.dir <- "data/raw/"
data.path <- paste0(data.dir, "GBD16_results_all2.csv")
ebi.path <- paste0("data/indicator_list.csv")
dpt.path <- paste0(data.dir, "dpt3.csv")
# Out
out.dir <- "data/prepped/"
mort.out <- paste0(out.dir, "mort.csv")
stat.out <- paste0(out.dir, "stat.csv")
ebi.out <- paste0(out.dir, "ebi.csv")
plot.dir <- "C:/Users/AustinC/OneDrive - bgC3/Documents/plots/U5M_plots/ebi_summary/"
dir.create(plot.dir, showWarnings = F)
### Code
## Cause-specific mortality
# Read data
dt <- fread(data.path)
birth.dt <- fread(paste0(data.dir, "births.csv"))[sex_id == 3]
setnames(birth.dt, c("year_id", "location_name"), c("year", "location"))
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
merge.dt <- merge(all.dt, combined.dt, by = c("age", "metric", "year", "measure", "location"))
merge.dt[, diff := val - sum_val]
merge.dt[, c("val", "upper", "lower", "sum_val") := NULL]
setnames(merge.dt, "diff", "val")
merge.dt[, cause := "Other"]
bound.dt <- rbind(dt, merge.dt, fill = T)
# Combine diphtheria, whooping cough, tetanus into DPT
dpt.causes <- c("Diphtheria", "Whooping cough", "Tetanus")
dpt.hold <- dt[cause %in% dpt.causes]
dpt.dt <- dt[cause %in% dpt.causes, .(val = sum(val)), by = .(age, metric, year, measure, location)]
dpt.dt[, cause := "DPT"]
bound.dt <- rbind(bound.dt[!(cause %in% dpt.causes)], dpt.dt, fill = T)
# Switch rate to have births in denominator
births.merge <- merge(bound.dt[metric == "Number"], birth.dt[, .(location, year, population)], by = c("year", "location"))
births.merge[, val := val / population]
births.merge[, population := NULL]
births.merge[, metric := "Rate"]
bound.dt <- rbind(bound.dt[metric == "Number"], births.merge)
# Calculate 5 year averages
bound.dt[year %%5 != 0, period := paste0((year - year%%5), "-", (year - year%%5 + 5))]
bound.dt[year %%5 == 0, period := paste0((year - year%%5 - 5), "-", (year - year%%5))]
period.dt <- bound.dt[, .(five_avg = mean(val)), by = .(age, metric, period, measure, location, cause)]
mort.dt <- merge(bound.dt, period.dt)
write.csv(mort.dt, mort.out, row.names = F)
## EBI
indicator.table <- data.table(read.csv(ebi.path))
indicator.list <- unique(indicator.table$IndicatorId)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.raw <- prep.ebi(indicator.list)
ebi.subset <- ebi.raw[, .(IndicatorId, Year, Value, CountryName)]
ebi.dt <- merge(ebi.subset, indicator.table)
setnames(ebi.dt, c("CountryName", "Year", "Value"), c("location", "year", "value"))
ebi.dt[, IndicatorId := NULL]
# DPT3 coverage from WHO
dpt.dt <- fread(dpt.path, header = T)
melt.dpt <- melt(dpt.dt, id.vars = "Cname", variable.name = "year")
setnames(melt.dpt, "Cname", "location")
melt.dpt[, c("Category", "Indicator") := .("DPT", "DPT3 Vaccine")]
ebi.dt <- rbind(ebi.dt, melt.dpt)
write.csv(ebi.dt, ebi.out, row.names = F)
### Stats
# Change between 2000 and 2015
start.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == start.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(start.val, "val", "start_val")
end.val <- mort.dt[metric == "Rate" & age == "Under 5" & year == end.year & measure == "Deaths" & location == cloc, .(cause, val)]
setnames(end.val, "val", "end_val")
change.dt <- merge(start.val, end.val)
change.dt[, change := (start_val - end_val) / start_val * 100]
# Rankings
start.val[order(start_val)]
## Table of improvement given uncertainty
bound2.dt <- rbind(mort.dt, dpt.hold, fill = T)
yr1 <- start.year
yr2 <- end.year
subset.mort <- bound2.dt[metric == "Rate" & age == "Under 5" & year %in% c(yr1, yr2) & measure == "Deaths", .(location, cause, year, val, upper, lower)]
# mean.dt <- dcast(subset.mort, location + cause ~ year, value.var = "val")
subset.mort[, cast_val := ifelse(year == start.year, lower, upper)]
cast.dt <- dcast(subset.mort, location + cause ~ year, value.var = "cast_val")
cast.dt[, sig := ifelse(get(as.character(start.year)) > get(as.character(end.year)), 1, 0)]
cast.dt[is.na(sig), sig := 0]
write.csv(cast.dt, stat.out, row.names =  F)
### Data Prep
library(data.table); library(RJSONIO); library(ggplot2); library(plotly)
## Paths
# In
data.dir <- "data/raw/"
data.path <- paste0(data.dir, "GBD16_results_all2.csv")
ebi.path <- paste0("data/indicator_list.csv")
dpt.path <- paste0(data.dir, "dpt3.csv")
# Out
out.dir <- "data/prepped/"
mort.out <- paste0(out.dir, "mort.csv")
stat.out <- paste0(out.dir, "stat.csv")
ebi.out <- paste0(out.dir, "ebi.csv")
plot.dir <- "C:/Users/AustinC/OneDrive - bgC3/Documents/plots/U5M_plots/ebi_summary/"
dir.create(plot.dir, showWarnings = F)
### Code
## Cause-specific mortality
# Read data
dt <- fread(data.path)
# Calculate other category
all.dt <- copy(dt[cause == "All causes"])
combined.dt <- dt[cause != "All causes", .(sum_val = sum(val)), by = .(age, metric, year, measure, location)]
merge.dt <- merge(all.dt, combined.dt, by = c("age", "metric", "year", "measure", "location"))
merge.dt[, diff := val - sum_val]
merge.dt[, c("val", "upper", "lower", "sum_val") := NULL]
setnames(merge.dt, "diff", "val")
merge.dt[, cause := "Other"]
bound.dt <- rbind(dt, merge.dt, fill = T)
# Combine diphtheria, whooping cough, tetanus into DPT
dpt.causes <- c("Diphtheria", "Whooping cough", "Tetanus")
dpt.hold <- dt[cause %in% dpt.causes]
dpt.dt <- dt[cause %in% dpt.causes, .(val = sum(val)), by = .(age, metric, year, measure, location)]
dpt.dt[, cause := "DPT"]
bound.dt <- rbind(bound.dt[!(cause %in% dpt.causes)], dpt.dt, fill = T)
# Calculate 5 year averages
bound.dt[year %%5 != 0, period := paste0((year - year%%5), "-", (year - year%%5 + 5))]
bound.dt[year %%5 == 0, period := paste0((year - year%%5 - 5), "-", (year - year%%5))]
period.dt <- bound.dt[, .(five_avg = mean(val)), by = .(age, metric, period, measure, location, cause)]
mort.dt <- merge(bound.dt, period.dt)
write.csv(mort.dt, mort.out, row.names = F)
## EBI
indicator.table <- data.table(read.csv(ebi.path))
indicator.list <- unique(indicator.table$IndicatorId)
prep.ebi <- function(indicator.list, cause.map = NULL) {
# Import DHS Indicator data for TFR for each survey
json_file <- fromJSON("https://api.dhsprogram.com/rest/dhs/data/FE_FRTR_W_TFR?perpage=500")
pull.indicator <- function(indicator) {
string <- paste0("https://api.dhsprogram.com/rest/dhs/data/", indicator, "?perpage=500")
json_file <- fromJSON(string)
json_data <- lapply(json_file$Data, function(x) { unlist(x) })
APIdata <- as.data.table(do.call("rbind", json_data),stringsAsFactors=FALSE)
return(APIdata)
}
dt <- rbindlist(lapply(indicator.list, pull.indicator))
dt[, Year := as.integer(SurveyYear)]
dt[, Value := as.numeric(Value)]
return(dt[])
}
ebi.raw <- prep.ebi(indicator.list)
ebi.subset <- ebi.raw[, .(IndicatorId, Year, Value, CountryName)]
ebi.dt <- merge(ebi.subset, indicator.table)
setnames(ebi.dt, c("CountryName", "Year", "Value"), c("location", "year", "value"))
ebi.dt[, IndicatorId := NULL]
# DPT3 coverage from WHO
dpt.dt <- fread(dpt.path, header = T)
melt.dpt <- melt(dpt.dt, id.vars = "Cname", variable.name = "year")
setnames(melt.dpt, "Cname", "location")
melt.dpt[, c("Category", "Indicator") := .("DPT", "DPT3 Vaccine")]
ebi.dt <- rbind(ebi.dt, melt.dpt)
write.csv(ebi.dt, ebi.out, row.names = F)
